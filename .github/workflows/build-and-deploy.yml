name: CI/CD Process
on:
  workflow_call:
  workflow_dispatch:
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows, macos]
    runs-on: ${{ matrix.os }}-latest
    env:
      ci: true
      AKKA_LICENSE_KEY: ${{ secrets.AKKA_LICENSE_KEY }}
    steps:
      - name: Checkout
        uses: DanySK/action-checkout@0.2.22
      - name: Set up JDK
        uses: actions/setup-java@v4.5.0
        with:
          distribution: temurin
          java-version: 17
          cache: sbt
      - uses: sbt/setup-sbt@v1.1.3
      - name: Build and test
        shell: bash
        run: sbt -v +test
      - name: Check formatting
        shell: bash
        run: sbt -v scalafmtCheckAll
      - name: Run linter
        shell: bash
        run: sbt -v "scalafixAll --check"
  release:
    permissions:
      contents: write
      packages: write
    outputs:
      release_created: ${{ steps.check-release.outputs.release_created }}
    concurrency:
      # Only one release job at a time. Strictly sequential.
      group: release
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - uses: actions/setup-node@v4.1.0
        with:
          cache: npm
          node-version: lts/*
      - run: npm clean-install
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release > semantic_release_output.txt || true
          cat semantic_release_output.txt
      - name: Check if release was created
        id: check-release
        run: 'echo "release_created=$(grep -q "no new version is released" semantic_release_output.txt && echo false || echo true)" >> $GITHUB_OUTPUT'
        shell: bash
  upload-docs:
    concurrency:
      # Only one release job at a time. Strictly sequential.
      group: upload-docs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.scala-version.outputs.version }}
    needs:
      - release
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && needs.release.outputs.release_created == 'true'
    # Skips if is PR or isn't inside main branch
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: build docs
        uses: actions/setup-node@v4.1.0
        with:
          cache: npm
          node-version: lts/*
      - name: Set up JDK
        uses: actions/setup-java@v4.5.0
        with:
          distribution: temurin
          java-version: 17
          cache: sbt
      - uses: sbt/setup-sbt@v1.1.3
      - name: Build docs
        run: sbt -v doc
      - name: Extract Scala version
        id: scala-version
        run: |
          echo "version=$(sbt 'show scalaVersion' | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | tail -n 1)" >> "$GITHUB_OUTPUT"
      - name: Deploy to GitHub Pages
        uses: crazy-max/ghaction-github-pages@v4
        with:
          target_branch: gh-pages
          build_dir: target/scala-${{ steps.scala-version.outputs.version }}/api
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy-image:
    permissions:
      contents: write
      packages: write
    concurrency:
      group: deploy-image
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    needs:
      - release
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && needs.release.outputs.release_created == 'true'
    # Skips if is PR or isn't inside main branch
    steps:
      - name: Checkout
        uses: DanySK/action-checkout@0.2.22
      - name: Set up JDK
        uses: actions/setup-java@v4.5.0
        with:
          distribution: temurin
          java-version: 17
      - name: Cache sbt dependencies
        uses: actions/cache@v4.1.2
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
            ~/.coursier
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            ${{ runner.os }}-sbt-     cache: sbt

      - name: Build Docker Image
        run: sbt docker:publishLocal

      - name: Log in to the Container registry
        uses: docker/login-action@06895751d15a223ec091bea144ad5c7f50d228d0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Image
        run: docker push ghcr.io/letsstreamit/profile-service:latest
  success:
    runs-on: ubuntu-latest
    needs:
      - build
      - release
      - deploy-image
      - upload-docs
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}
